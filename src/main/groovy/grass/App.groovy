/*
 * This Groovy source file was generated by the Gradle 'init' task.
 */
package grass
import com.google.common.eventbus.EventBus;
import grass.plugins.*
import java.time.*
import java.time.ZoneId



class App implements GrassMixin{
    // command line parsing
    def cli = new CliBuilder(usage: 'groovy grass -s "source" -d "destination"')
    def options
    def plugins
    def config

    static rootEventBus = new EventBus()

    public setupApp() {
        cli.s(longOpt: 'source', args: 1, required: true, 'source')
        cli.d(longOpt: 'destination', args: 1, required: true, 'destination')
        cli.i(longOpt: 'index', args: 1, required: false, 'index')
    }

    public App(String[] args) {
        setupApp();
        options = cli.parse(["-s", "../blog", "-d", "../blog-out", "-i", "5"])
        if (options == null)
            System.exit(1)

        setupConfiguration()

        loadPlugins()

        eventBus.post([eventType:PluginEventType.INIT, payload: ""] as PluginEvent)

        // find all the pages
        loadPages()

        // render the index
        renderIndex()

        // write pages
        writePages()

        // do cleanup
    }

    def setupConfiguration() {
        // load our config
        config = loadConfig()
        config.source = new File("${options.s}")
        config.destination = new File("${options.d}")
        config.indexPage = options.i ?: 'full'
        config.destination.mkdirs()
        config.pages = []
        config.plugins = []
    }

    def loadConfig() {
	      config = new ConfigObject()
	      def global = new File("global-config.groovy")
	      if (global.exists()) {
		        config.merge(new ConfigSlurper().parse(global.toURL()))
	      }
	      def local = new File("${options.s}/site-config.groovy")
	      if (local.exists()) {
		        config.merge(new ConfigSlurper().parse(local.toURL()))
	      }
    }

    def loadPlugins() {
        def enabled = config?.plugins?.enabled ?: []
	      def disabled = config?.plugins?.disabled ?: []

        def classLoader =ClassLoader.getSystemClassLoader()
        // Look for grass on the class path 
        def url = classLoader.getSystemResource("grass")
        def pluginNames = [:]

        // Recurse through all class files to find the root plugin classes
        new File(url.toURI()).eachFileRecurse {
            if (it.name.endsWith("Plugin.class")){
                def simpleName = it.name.replace(".class", "")
                pluginNames[simpleName] = Class.forName("grass.plugins."+simpleName)
            }
        }

        // Instantiate the plugins if they are not disabled
        pluginNames.each { 
            if ((!enabled || enabled.contains(it.key)) && !disabled.contains(it.key)) {
                def instance = it.value.newInstance()
                if (instance.hasProperty('config')) {
                    instance.config = config
                }
                eventBus.register(instance)

                config.plugins << instance
            }
        }

    }

    def loadPages() {
	      expandPaths(config?.paths?.pages ?: []).each { dir ->
		        dir.eachFile { file ->
                if (file.name.equals('.DS_Store')) return  // Exclude .DS_Store files
			          // create our page object
			          def name = file.name
			          if (name.lastIndexOf('.') > 0) {
				            name = name[0..(name.lastIndexOf('.') - 1)]
			          }
			          def title = name.split('-').collect { it.capitalize() }.join(' ')
			          def out = file.parentFile.absolutePath - config.source.absolutePath + "${File.separator}${name}.html"

                def instant = Instant.ofEpochMilli(file.lastModified())
                def localDateTime = LocalDateTime.ofInstant(instant, ZoneId.of("PST", ZoneId.SHORT_IDS ))
			          addPage(path: file, content: file.text, template: 'page',
                        name: name, title: title,
                        date: localDateTime.toLocalDate(), out: out)
		        }
	      }
    }


	  def expandPaths(paths) {
		    [paths].flatten().inject([]) { list, path ->
			      list << new File(config.source, path)
			      list << new File(path)
			      list
		    }.findAll { it.exists() }
	  }

    /* helper methods */
    def renderIndex() {
        //println config.pages
	      def index = new Page(content: '', template: 'index',
                             name: config?.site?.name ?: 'Index',
                             title: config?.site?.title,
                             date: LocalDate.now(), out: 'index.html')

	      // preprocess index
        eventBus.post([eventType:PluginEventType.BEFORE_INDEX,
                       payload: [index, config.pages]] as PluginEvent)

	      addPage(index)
        eventBus.post([eventType:PluginEventType.AFTER_INDEX,
                       payload: [index, config.pages]] as PluginEvent)

    }

    def writePages() {
	      config.pages.each { page ->
            eventBus.post([eventType:PluginEventType.BEFORE_WRITE,
                           payload: page] as PluginEvent)
		        writeFile(page.out, page.content)

            eventBus.post([eventType:PluginEventType.AFTER_WRITE,
                           payload: page] as PluginEvent)
	      }
    }

    static void main(String[] args) {
        def app = new App(args)
    }
}
